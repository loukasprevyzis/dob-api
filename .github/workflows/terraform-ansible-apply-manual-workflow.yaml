name: dob-api - Terraform Apply and Ansible PSQL Setup in Production (Manually Triggered Workflow)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'prod-manual'
      version:
        description: 'Manual Deploy'
        required: false

jobs:
  terraform-apply-primary:
    name: Terraform Apply - Primary Region
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
      - name: Terraform Init and Apply
        working-directory: infra/primary-region
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-1
          DEPLOY_ENV: ${{ github.event.inputs.environment }}
        run: |
          terraform init
          terraform apply -var-file=env.tfvars -input=false -auto-approve

  terraform-apply-failover:
    name: Terraform Apply - DR Region
    runs-on: ubuntu-latest
    needs: terraform-apply-primary
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
      - name: Terraform Init and Apply
        working-directory: infra/failover-region
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-1
          DEPLOY_ENV: ${{ github.event.inputs.environment }}
        run: |
          terraform init
          terraform apply -var-file=env.tfvars -input=false -auto-approve

  ansible-deploy:
    name: Ansible Deploy with Vault
    runs-on: ubuntu-latest
    needs: [terraform-apply-primary, terraform-apply-failover]
    steps:
      - uses: actions/checkout@v3
      - name: Install Ansible and AWS Collection
        run: |
          sudo apt-get update && sudo apt-get install -y python3-pip sshpass
          pip3 install ansible
          ansible-galaxy collection install amazon.aws

      - name: Setup SSH Key for Primary Region
        env:
          SSH_PRIVATE_KEY_PRIMARY: ${{ secrets.SSH_PRIVATE_KEY_PRIMARY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY_PRIMARY" > ~/.ssh/id_rsa_primary
          chmod 600 ~/.ssh/id_rsa_primary
          ssh-keyscan -H ${{ vars.PRIMARY_DB_HOST }} >> ~/.ssh/known_hosts
          ssh-keyscan -H ${{ vars.PRIMARY_REPLICA_DB_HOST }} >> ~/.ssh/known_hosts

      - name: Setup SSH Key for Failover Region
        env:
          SSH_PRIVATE_KEY_FAILOVER: ${{ secrets.SSH_PRIVATE_KEY_FAILOVER }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY_FAILOVER" > ~/.ssh/id_rsa_failover
          chmod 600 ~/.ssh/id_rsa_failover
          ssh-keyscan -H ${{ vars.FAILOVER_DB_HOST }} >> ~/.ssh/known_hosts
          ssh-keyscan -H ${{ vars.FAILOVER_REPLICA_DB_HOST }} >> ~/.ssh/known_hosts

      - name: Run Ansible Playbook - Primary & DR Regions
        env:
          ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
        run: |
          echo "$ANSIBLE_VAULT_PASSWORD" > vault_pass.txt
          ansible-playbook -i ansible/inventory.ini ansible/playbook.yml \
            --user ubuntu --private-key ~/.ssh/id_rsa_primary \
            --vault-password-file vault_pass.txt || true
          ansible-playbook -i ansible/inventory.ini ansible/playbook.yml \
            --user ubuntu --private-key ~/.ssh/id_rsa_failover \
            --vault-password-file vault_pass.txt || true
          rm vault_pass.txt