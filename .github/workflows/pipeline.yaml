name: dob-api CI/CD

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  go-test:
    name: Go Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            dob-api/pkg/mod
            dob-api/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('dob-api/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go--

      - uses: actions/setup-go@v4
        with:
          go-version: '1.24'
      - name: Run Go Tests
        run: |
          cd dob-api
          go mod tidy
          go test ./... -v -cover

  docker-build-push:
    name: Build and Push Docker Image to ECR
    runs-on: ubuntu-latest
    needs: go-test
    env:
      ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}  # <-- explicitly set here
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      - uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr
      - name: Build and Push Docker Image
        working-directory: dob-api
        run: |
          IMAGE_TAG=${GITHUB_SHA::7}
          REPO_URI=${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY
          docker buildx build --platform linux/amd64 -t $REPO_URI:$IMAGE_TAG --load .
          docker push $REPO_URI:$IMAGE_TAG

  terraform-plan-primary:
    name: Terraform Plan - Primary Region (eu-west-1)
    runs-on: ubuntu-latest
    needs: docker-build-push
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
      - name: Terraform Init and Plan
        working-directory: infra/primary-region
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-1
        run: |
          terraform init
          terraform plan -var-file=env.tfvars -input=false -out=tfplan

  terraform-plan-failover:
    needs:
      - docker-build-push
      - terraform-plan-primary
    name: Terraform Plan - Failover Region (eu-central-1)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
      - name: Terraform Init and Plan
        working-directory: infra/failover-region
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-1
        run: |
          terraform init
          terraform plan -var-file=env.tfvars -input=false -out=tfplan

  terraform-apply-primary:
    name: Terraform Apply - Primary Region (eu-central-1)
    runs-on: ubuntu-latest
    needs: docker-build-push
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
      - name: Terraform Init and Apply
        working-directory: infra/primary-region
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-1
        run: |
          terraform init
          terraform apply -var-file=env.tfvars -input=false -auto-approve

  terraform-apply-failover:
    needs:
      - docker-build-push
      - terraform-apply-primary
    name: Terraform Apply - Failover
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
      - name: Terraform Init and Apply
        working-directory: infra/failover-region
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-1
        run: |
          terraform init
          terraform apply -var-file=env.tfvars -input=false -auto-approve

  # ansible-deploy:
  #   name: Ansible Deploy with Vault
  #   runs-on: ubuntu-latest
  #   needs: [terraform-apply-primary, terraform-apply-failover]
  #   if: github.ref == 'refs/heads/main'
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Install Ansible and AWS Collection
  #       run: |
  #         sudo apt-get update && sudo apt-get install -y python3-pip sshpass
  #         pip3 install ansible
  #         ansible-galaxy collection install amazon.aws

  #     - name: Setup SSH Key for Primary Region
  #       env:
  #         SSH_PRIVATE_KEY_PRIMARY: ${{ secrets.SSH_PRIVATE_KEY_PRIMARY }}
  #       run: |
  #         mkdir -p ~/.ssh
  #         echo "$SSH_PRIVATE_KEY_PRIMARY" > ~/.ssh/id_rsa_primary
  #         chmod 600 ~/.ssh/id_rsa_primary
  #         ssh-keyscan -H primary-db-hostname >> ~/.ssh/known_hosts  # Replace with primary hosts

  #     - name: Run Ansible Playbook - Primary Region
  #       env:
  #         ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
  #       run: |
  #         echo "$ANSIBLE_VAULT_PASSWORD" > vault_pass.txt
  #         ansible-playbook -i ansible/inventory-primary.ini ansible/playbook.yml \
  #           --user ubuntu --private-key ~/.ssh/id_rsa_primary \
  #           --vault-password-file vault_pass.txt
  #         rm vault_pass.txt

  #     - name: Setup SSH Key for Failover Region
  #       env:
  #         SSH_PRIVATE_KEY_FAILOVER: ${{ secrets.SSH_PRIVATE_KEY_FAILOVER }}
  #       run: |
  #         mkdir -p ~/.ssh
  #         echo "$SSH_PRIVATE_KEY_FAILOVER" > ~/.ssh/id_rsa_failover
  #         chmod 600 ~/.ssh/id_rsa_failover
  #         ssh-keyscan -H failover-db-hostname >> ~/.ssh/known_hosts  # Replace with failover hosts

  #     - name: Run Ansible Playbook - Failover Region
  #       env:
  #         ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
  #       run: |
  #         echo "$ANSIBLE_VAULT_PASSWORD" > vault_pass.txt
  #         ansible-playbook -i ansible/inventory-failover.ini ansible/playbook.yml \
  #           --user ubuntu --private-key ~/.ssh/id_rsa_failover \
  #           --vault-password-file vault_pass.txt
  #         rm vault_pass.txt