name: dob-api CI/CD

on:
  workflow_dispatch:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main]

jobs:
  go-test:
    name: Go Unit Tests
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    steps:
      - uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Initialize go.sum
        working-directory: dob-api
        run: |
          if [ ! -f go.sum ]; then
            go mod init temp && go mod tidy > /dev/null 2>&1 || true
          fi

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            dob-api/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('dob-api/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run Go Tests
        working-directory: dob-api
        run: |
          go mod tidy
          go test $(go list ./...) -v -cover

  docker-build-push:
    name: Build and Push Docker Image to ECR
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    needs: go-test
    env:
      ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      - uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr
      - name: Build and Push Docker Image
        working-directory: dob-api
        run: |
          IMAGE_TAG=${GITHUB_SHA::7}
          REPO_URI=${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY
          docker buildx build --platform linux/amd64 -t $REPO_URI:$IMAGE_TAG --load .
          docker push $REPO_URI:$IMAGE_TAG

  terraform-plan-primary:
    name: Terraform Plan - Primary Region (eu-west-1)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    needs: docker-build-push
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
      - name: Terraform Init and Plan
        working-directory: infra/primary-region
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-1
        run: |
          terraform init
          terraform plan -var-file=env.tfvars -input=false -out=tfplan

  terraform-plan-failover:
    name: Terraform Plan - Failover Region (eu-central-1)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    needs:
      - docker-build-push
      - terraform-plan-primary
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
      - name: Terraform Init and Plan
        working-directory: infra/failover-region
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-1
        run: |
          terraform init
          terraform plan -var-file=env.tfvars -input=false -out=tfplan

  ansible-plan:
    name: Ansible Plan (Check Mode)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    needs: [terraform-plan-primary, terraform-plan-failover]
    steps:
      - uses: actions/checkout@v3
      - name: Install Ansible and AWS Collection
        run: |
          sudo apt-get update && sudo apt-get install -y python3-pip sshpass
          pip3 install ansible
          ansible-galaxy collection install amazon.aws

      - name: Setup SSH Key for Primary Region
        env:
          SSH_PRIVATE_KEY_PRIMARY: ${{ secrets.SSH_PRIVATE_KEY_PRIMARY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY_PRIMARY" > ~/.ssh/id_rsa_primary
          chmod 600 ~/.ssh/id_rsa_primary
          ssh-keyscan -H ${{ vars.PRIMARY_DB_HOST }} >> ~/.ssh/known_hosts
          ssh-keyscan -H ${{ vars.PRIMARY_REPLICA_DB_HOST }} >> ~/.ssh/known_hosts

      - name: Setup SSH Key for Failover Region
        env:
          SSH_PRIVATE_KEY_FAILOVER: ${{ secrets.SSH_PRIVATE_KEY_FAILOVER }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY_FAILOVER" > ~/.ssh/id_rsa_failover
          chmod 600 ~/.ssh/id_rsa_failover
          ssh-keyscan -H ${{ vars.FAILOVER_DB_HOST }} >> ~/.ssh/known_hosts
          ssh-keyscan -H ${{ vars.FAILOVER_REPLICA_DB_HOST }} >> ~/.ssh/known_hosts

      - name: Ansible Check - Primary & DR Regions
        env:
          ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
        run: |
          echo "$ANSIBLE_VAULT_PASSWORD" > vault_pass.txt
          ansible-playbook -i ansible/inventory.ini ansible/playbook.yml \
            --user ubuntu --private-key ~/.ssh/id_rsa_primary \
            --vault-password-file vault_pass.txt \
            --check || true
          ansible-playbook -i ansible/inventory.ini ansible/playbook.yml \
            --user ubuntu --private-key ~/.ssh/id_rsa_failover \
            --vault-password-file vault_pass.txt \
            --check || true
          rm vault_pass.txt

  terraform-apply-primary:
    name: Terraform Apply - Primary Region (eu-central-1)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
    needs: docker-build-push
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
      - name: Terraform Init and Apply
        working-directory: infra/primary-region
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-1
        run: |
          terraform init
          terraform apply -var-file=env.tfvars -input=false -auto-approve

  terraform-apply-failover:
    name: Terraform Apply - Failover
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
    needs:
      - docker-build-push
      - terraform-apply-primary
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
      - name: Terraform Init and Apply
        working-directory: infra/failover-region
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-1
        run: |
          terraform init
          terraform apply -var-file=env.tfvars -input=false -auto-approve

  ansible-deploy:
    name: Ansible Deploy with Vault
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
    needs: [terraform-apply-primary, terraform-apply-failover]
    steps:
      - uses: actions/checkout@v3
      - name: Install Ansible and AWS Collection
        run: |
          sudo apt-get update && sudo apt-get install -y python3-pip sshpass
          pip3 install ansible
          ansible-galaxy collection install amazon.aws

      - name: Setup SSH Key for Primary Region
        env:
          SSH_PRIVATE_KEY_PRIMARY: ${{ secrets.SSH_PRIVATE_KEY_PRIMARY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY_PRIMARY" > ~/.ssh/id_rsa_primary
          chmod 600 ~/.ssh/id_rsa_primary
          ssh-keyscan -H ${{ vars.PRIMARY_DB_HOST }} >> ~/.ssh/known_hosts
          ssh-keyscan -H ${{ vars.PRIMARY_REPLICA_DB_HOST }} >> ~/.ssh/known_hosts

      - name: Setup SSH Key for Failover Region
        env:
          SSH_PRIVATE_KEY_FAILOVER: ${{ secrets.SSH_PRIVATE_KEY_FAILOVER }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY_FAILOVER" > ~/.ssh/id_rsa_failover
          chmod 600 ~/.ssh/id_rsa_failover
          ssh-keyscan -H ${{ vars.FAILOVER_DB_HOST }} >> ~/.ssh/known_hosts
          ssh-keyscan -H ${{ vars.FAILOVER_REPLICA_DB_HOST }} >> ~/.ssh/known_hosts

      - name: Run Ansible Playbook - Primary Region & DR Region
        env:
          ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
        run: |
          echo "$ANSIBLE_VAULT_PASSWORD" > vault_pass.txt
          ansible-playbook -i ansible/inventory.ini ansible/playbook.yml \
            --user ubuntu --private-key ~/.ssh/id_rsa_primary \
            --vault-password-file vault_pass.txt || true
          ansible-playbook -i ansible/inventory.ini ansible/playbook.yml \
            --user ubuntu --private-key ~/.ssh/id_rsa_failover \
            --vault-password-file vault_pass.txt || true
          rm vault_pass.txt

  ansible-promote-dr:
    name: Ansible Promote DR (Failover to Primary DB)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
    needs: [terraform-apply-primary, terraform-apply-failover]
    steps:
      - uses: actions/checkout@v3

      - name: Install Ansible and AWS Collection
        run: |
          sudo apt-get update && sudo apt-get install -y python3-pip sshpass
          pip3 install ansible
          ansible-galaxy collection install amazon.aws

      - name: Setup SSH Key for Failover Region
        env:
          SSH_PRIVATE_KEY_FAILOVER: ${{ secrets.SSH_PRIVATE_KEY_FAILOVER }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY_FAILOVER" > ~/.ssh/id_rsa_failover
          chmod 600 ~/.ssh/id_rsa_failover
          ssh-keyscan -H ${{ vars.FAILOVER_DB_HOST }} >> ~/.ssh/known_hosts
          ssh-keyscan -H ${{ vars.FAILOVER_REPLICA_DB_HOST }} >> ~/.ssh/known_hosts

      - name: Run Promote DR Playbook & ECS Failover to DR Database
        env:
          ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
        run: |
          echo "$ANSIBLE_VAULT_PASSWORD" > vault_pass.txt
          ansible-playbook -i ansible/inventory.ini ansible/promote-dr-playbook.yml \
            --user ubuntu --private-key ~/.ssh/id_rsa_failover \
            --vault-password-file vault_pass.txt || true
          rm vault_pass.txt